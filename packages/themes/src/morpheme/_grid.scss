@use 'sass:math';

// Variables
$v-col-default-width: 100%; // Lebar default
$v-col-max-cols: 12; // Jumlah maksimum kolom
$breakpoints: (
  sm: 360px,
  md: 640px,
  lg: 768px,
  xl: 834px,
  2xl: 1024px,
  3xl: 1440px,
);
$gapSizes: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 24, 28, 40, 48, 56,
  60;
$alignItems: (
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch,
);
$alignContent: (
  start: flex-start,
  end: flex-end,
  center: center,
  space-between: space-between,
  space-around: space-around,
  space-evenly: space-evenly,
);
$justifyContent: (
  start: flex-start,
  end: flex-end,
  center: center,
  space-between: space-between,
  space-around: space-around,
  space-evenly: space-evenly,
);
$flexWrap: (
  wrap: wrap,
  'wrap-reverse': wrap-reverse,
  nowrap: nowrap,
);

@mixin breakpoint($name) {
  $maxWidth: map-get($breakpoints, $name);

  @media (min-width: $maxWidth) {
    @content;
  }
}

@mixin alignment-justification($prefix, $property, $value) {
  #{$property}: $value;

  @each $name, $maxWidth in $breakpoints {
    &-#{$prefix}-#{$name} {
      @include breakpoint(#{$name}) {
        #{$property}: $value;
      }
    }
  }
}

@mixin v-col-width($cols) {
  flex: 1 1 math.div($cols, $v-col-max-cols) * 100%;
  max-width: math.div($cols, $v-col-max-cols) * 100%;
}

@mixin v-col-offset($offset) {
  @if $offset > 0 {
    margin-left: math.div($offset, $v-col-max-cols) * 100%;
  }
}

@mixin v-col-order($order) {
  @if $order > 0 {
    order: $order;
  }
}

@mixin v-gap($gap) {
  gap: var(--size-spacing-#{$gap});
}

.v-row {
  display: flex;
  flex: 1 1 auto;

  @each $name, $value in $flexWrap {
    &--wrap-#{$name} {
      @include alignment-justification('wrap', 'flex-wrap', $value);
    }
  }

  @each $name, $value in $alignItems {
    &--align-#{$name} {
      @include alignment-justification('align', 'align-items', $value);
    }
  }

  @each $name, $value in $alignContent {
    &--content-#{$name} {
      @include alignment-justification('content', 'align-content', $value);
    }
  }

  @each $name, $value in $justifyContent {
    &--justify-#{$name} {
      @include alignment-justification('justify', 'justify-content', $value);
    }
  }
}

.v-col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;

  &-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: none;
  }

  @for $i from 1 through $v-col-max-cols {
    &-#{$i} {
      @include v-col-width($i);
    }
  }

  @each $name, $maxWidth in $breakpoints {
    @for $i from 1 through $v-col-max-cols {
      &-#{$name}-auto {
        @media (min-width: $maxWidth) {
          flex: 0 0 auto;
          width: auto;
          max-width: none;
        }
      }
      &-#{$name}-#{$i} {
        @media (min-width: $maxWidth) {
          @include v-col-width($i);
        }
      }
    }
  }
}

.v-offset {
  @for $i from 1 through $v-col-max-cols {
    &-#{$i} {
      @include v-col-offset($i);
    }
  }

  @each $name, $maxWidth in $breakpoints {
    @for $i from 1 through $v-col-max-cols {
      &-#{$name}-#{$i} {
        @media (min-width: $maxWidth) {
          @include v-col-offset($i);
        }
      }
    }
  }
}

.v-order {
  @for $i from 1 through $v-col-max-cols {
    &-#{$i} {
      @include v-col-order($i);
    }
  }

  @each $name, $maxWidth in $breakpoints {
    @for $i from 1 through $v-col-max-cols {
      &-#{$name}-#{$i} {
        @media (min-width: $maxWidth) {
          @include v-col-order($i);
        }
      }
    }
  }
}

.v-gap {
  @each $gap in $gapSizes {
    &-#{$gap} {
      @include v-gap($gap);
    }
  }

  @each $name, $maxWidth in $breakpoints {
    @each $gap in $gapSizes {
      &-#{$name}-#{$gap} {
        @media (min-width: $maxWidth) {
          @include v-gap($gap);
        }
      }
    }
  }
}
